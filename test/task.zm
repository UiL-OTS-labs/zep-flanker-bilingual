/******************************************************************************\
FILE:           task.zm
AUTHOR:         Chris van Run <C.P.A.vanRun@uu.nl>
ADAPTED BY:     Maarten

DESCRIPTION: Contains the description of the flow of the experiment

HISTORY:
2014-11-03 CvR   Created.

\******************************************************************************/

import test_page;
import std_pause_page;
import stimuli;
import output;
import instructions;

Block task
{
    Part instructions
    {
        on_event:entry()
        {
            control.button_box.enable_all_buttons(CONTINUE);
            pause_page.set_text(PRAC_INSTRUCTION, true);
            pause_page.action(this);
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block practice
    {

        on_event:entry()
        {
            test_page.hide_cursor();

            num_cycles = prac_items.size;

            test_page.setup(prac_items.size, true, true);
        }

        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                item = prac_items[practice.cycle];
                test_page.action(
                    this,
                    item,
                    reference_time,
                    practice.num_cycles()
                    );
            }

//            Can be used to save practice performance
//            on_event:exit()
//            {
//            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
    
    Part instructions_test
    {
        on_event:entry()
        {
            control.button_box.enable_all_buttons(CONTINUE);
            pause_page.set_text(TEST_INSTRUCTION, true);
            pause_page.action(this);
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block test_1
    {

        TestItem[] selected_items;

        on_event:entry()
        {
            test_page.hide_cursor();

            if (selected_group == NF)
                selected_items = test_items_neutral;
            else
                selected_items = test_items_ci;

            num_cycles = selected_items.size;

            test_page.setup();
        }

        on_event:exit()
        {
            test_page.show_cursor();
            test_page.cleanup();
            test_output_save_and_clear(test_output);
        }

        Trial stimulus
        {
            TestItem item;

            on_event:entry()
            {
                item = selected_items[test_1.cycle];
                test_page.action(this, item, now());

                // debug line:
                // println("Present: " + test_1_block.cycle + " " + item.id);
                // signal(this,CONTINUE);
            }

            on_event:exit()
            {
                //generate and save output.
                TestOutput output;
                output.block_nr = 1;
                output.trial_nr = test_1.cycle+1;
                output.id = item.id;
                output.inter_stimulus_interval = item.isi;
                output.congruence = item.flankers;
                output.rt = test_page.response.rt;
                output.selected_side = item.side;
                output.expected_side = test_page.response.value;
                output.correct = test_page.response.correct;

                test_output_append(test_output, output);
            }
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
	
    Part instructions_pause
    {
        on_event:entry()
        {
            control.button_box.enable_all_buttons(CONTINUE);
            pause_page.set_text(TEST_INSTRUCTION, true);
            pause_page.action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
    
    Block test_2
    {
        TestItem[] selected_items;  // Reference to the proper test items

        on_event:entry()
        {
            test_page.hide_cursor();
            
            if (selected_group == NF)
                selected_items = test_items_ci;
            else
                selected_items = test_items_neutral;

            num_cycles = selected_items.size;

            test_page.setup();
        }

        on_event:exit()
        {
            test_page.show_cursor();
            test_page.cleanup();
            test_output_save_and_clear(test_output);
        }

        Trial stimulus
        {
            TestItem item;

            on_event:entry()
            {
                item = selected_items[test_2.cycle];
                test_page.action(this, item, now());

                // debug line:
                // println("Present: " + test_2_block.cycle + " " + item.id);
                // signal(this,CONTINUE);
            }

            on_event:exit()
            {
                //generate and save output.
                TestOutput output;
                output.block_nr = 2;
                output.trial_nr = test_2.cycle+1;
                output.id = item.id;
                output.inter_stimulus_interval = item.isi;
                output.congruence = item.flankers;
                output.rt = test_page.response.rt;
                output.selected_side = item.side;
                output.expected_side = test_page.response.value;
                output.correct = test_page.response.correct;

                test_output_append(test_output, output);
            }
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}

void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
