/******************************************************************************\
FILE:           flanker_task.zp
AUTHOR:         Chris van Run <C.P.A.vanRun@uu.nl>
ADAPTED BY:     Maarten

DESCRIPTION:

In this task there are 5 arrows. The one in the middle is flanked by 2 arrows
on both sides. Participant respond with a left and right button, depending on
the direction of the arrow in the center. If the flanking arrows point in the
same direction as the center arrow it is a congruent trial, if the flankers
point in the opposite direction the trial type is called incongruent.
Additionally, there are trials flanked by stripes, these are the Neutral trials
because the stripes do not point in a direction.

There is a practice round.

Each trial has a defined ISI (here 500ms) that is used as follows:
T_0ms = empty_page
T_500ms = fixation_cross_shown (T_0+ISI)
T_800ms = fixation_cross_hides
T_1000ms = arrows are shown
T_1000ms+RT=participant_responses
T_1000ms+RT+((total_trial_time-1000ms)-RT)=next trial starts;

Total trial time is now set at ~2 seconds so there is a delay after the
response that is dependent on the response, ISI, fixation_cross_duration
If response is longer than the length duration it defaults to 0s.

HISTORY:
2014-11-03 CvR   Created.

\******************************************************************************/

requires 1.14;

//globally used modules
import std_windows1;
import std_entry_page1;
import std_exit_page1;
import std_blank_page;

import texts_en;
import stimuli;

import test::task;
import test::shuffle;

Experiment experiment
{

    on_event:entry()
    {
        show_test_windows();
        control.button_box.open();
        control.button_box.enable_all_buttons(CONTINUE);

        if (test::load_stimuli() != OK)
            terminate;
        if (test::shuffle_items() != OK)
            terminate;
    }

    on_event:exit()
    {
        control.button_box.close();
        terminate;
    }


    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }

    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

	Part
    {
        on_event:entry()
        {
            blank_page.fill_pattern_color = TEST_PAGE_COLOR;
            blank_page.action_auto(this, 500ms);
        }
    }

    Part main_experiment
    {
        on_event:entry()
        {
            test::action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.fill_pattern_color = TEST_PAGE_COLOR;
            blank_page.action_auto(this, 500ms);
        }
    }

    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
